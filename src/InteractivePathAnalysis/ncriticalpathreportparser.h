#pragma once

#include <string>
#include <vector>
#include <memory>

enum Role {
    PATH,
    SEGMENT,
    OTHER
};

struct Line {
    std::string line;
    Role role;
};

/** 
 * Helper structure for Path Information, containing parsed data for a specific path. 
 */
struct PathInfo {
    int index = -1;
    std::string start;
    std::string end;
    std::string slack;
    std::string id() const { return start + ":" + end;}
    bool isValid() const { return (index != -1); }
};

/** 
 * Represents minimal block information transmitted into an Item. 
 */
struct Block {
    std::vector<Line> lines;
    bool isPath() { return pathInfo.isValid(); }

    PathInfo pathInfo;
};
using BlockPtr = std::shared_ptr<Block>;

/**
 * @brief Parser for the Critical Path Report generated by VPR.
 * 
 * This parser is designed to process the Critical Path Report output generated by VPR (Versatile Place and Route) tool.
 */
class NCriticalPathReportParser {
public:
    static std::vector<BlockPtr> process(const std::vector<std::string>& lines);
};


